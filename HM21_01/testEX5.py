
# Generated by CodiumAI

from HM21_01.ex5 import combine_lists

import unittest

class TestCombineLists(unittest.TestCase):

    #  Returns the concatenation of two lists.
    def test_concatenation(self):
        list_1 = [1, 2, 3]
        list_2 = [4, 5, 6]
        expected_result = [1, 2, 3, 4, 5, 6]
        self.assertEqual(combine_lists(list_1, list_2), expected_result)

    #  Returns an empty list when both input lists are empty.
    def test_empty_lists(self):
        list_1 = []
        list_2 = []
        expected_result = []
        self.assertEqual(combine_lists(list_1, list_2), expected_result)

    #  Returns the first list when the second list is empty.
    def test_second_list_empty(self):
        list_1 = [1, 2, 3]
        list_2 = []
        expected_result = [1, 2, 3]
        self.assertEqual(combine_lists(list_1, list_2), expected_result)

    #  Raises a TypeError if either input is not a list.
    def test_type_error(self):
        list_1 = [1, 2, 3]
        list_2 = "not a list"
        with self.assertRaises(TypeError):
            combine_lists(list_1, list_2)

    #  Returns None if either input is None.
    def test_input_none(self):
        list_1 = [1, 2, 3]
        list_2 = None
        expected_result = None
        self.assertEqual(combine_lists(list_1, list_2), expected_result)

    #  Handles large lists without crashing.
    def test_large_lists(self):
        list_1 = [1] * 1000000
        list_2 = [2] * 1000000
        expected_result = [1] * 1000000 + [2] * 1000000
        self.assertEqual(combine_lists(list_1, list_2), expected_result)
