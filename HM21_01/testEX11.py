# Generated by CodiumAI

from HM21_01.ex11 import find_number

import unittest


class TestFindNumber(unittest.TestCase):

    #  Returns the index of the first occurrence of the given number in the list
    def test_returns_index_of_first_occurrence(self):
        # Arrange
        list_of_integers = [1, 2, 3, 4, 5, 6]
        number = 3

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, 2)

    #  Returns -1 if the number is not found in the list
    def test_returns_negative_one_if_number_not_found(self):
        # Arrange
        list_of_integers = [1, 2, 3, 4, 5, 6]
        number = 7

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, -1)

    #  Works correctly with a list of length 1
    def test_works_with_list_of_length_one(self):
        # Arrange
        list_of_integers = [1]
        number = 1

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, 0)

    #  Works correctly with an empty list
    def test_works_with_empty_list(self):
        # Arrange
        list_of_integers = []
        number = 1

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, -1)

    #  Works correctly with a list containing None values
    def test_works_with_list_containing_none_values(self):
        # Arrange
        list_of_integers = [1, None, 3, None, 5]
        number = None

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, 1)

    #  Works correctly with a list containing non-integer values
    def test_works_with_list_containing_non_integer_values(self):
        # Arrange
        list_of_integers = [1, 2, 'three', 4, 5]
        number = 'three'

        # Act
        result = find_number(list_of_integers, number)

        # Assert
        self.assertEqual(result, 2)
