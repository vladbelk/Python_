
# Generated by CodiumAI

from HM21_01.ex6 import calculate_powers

import unittest

class TestCalculatePowers(unittest.TestCase):

    #  The function returns a list of integers raised to the power of the given degree.
    def test_return_list_of_powers(self):
        degree = 2
        list_of_integers = [1, 2, 3, 4, 5]
        expected_result = [1, 4, 9, 16, 25]
        self.assertEqual(calculate_powers(degree, list_of_integers), expected_result)

    #  The function correctly handles a list of integers with length 0.
    def test_empty_list_of_integers(self):
        degree = 3
        list_of_integers = []
        expected_result = []
        self.assertEqual(calculate_powers(degree, list_of_integers), expected_result)

    #  The function correctly handles a degree of 0.
    def test_degree_zero(self):
        degree = 0
        list_of_integers = [1, 2, 3, 4, 5]
        expected_result = [1, 1, 1, 1, 1]
        self.assertEqual(calculate_powers(degree, list_of_integers), expected_result)

    #  The function raises a TypeError if the degree is not an integer.
    def test_non_integer_degree(self):
        degree = 2.5
        list_of_integers = [1, 2, 3, 4, 5]
        with self.assertRaises(TypeError):
            calculate_powers(degree, list_of_integers)

    #  The function raises a TypeError if the list of integers contains a non-integer.
    def test_non_integer_in_list(self):
        degree = 2
        list_of_integers = [1, 2, '3', 4, 5]
        with self.assertRaises(TypeError):
            calculate_powers(degree, list_of_integers)

    #  The function raises a TypeError if the list of integers is not a list.
    def test_non_list_of_integers(self):
        degree = 2
        list_of_integers = '1, 2, 3, 4, 5'
        with self.assertRaises(TypeError):
            calculate_powers(degree, list_of_integers)
