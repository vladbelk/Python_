
# Generated by CodiumAI

from HM21_01.ex12 import calculate_factorials

import unittest

class TestCalculateFactorials(unittest.TestCase):

    #  The function returns a list of factorials for a given list of integers.
    def test_factorials_for_list_of_integers(self):
        input_list = [1, 2, 3, 4, 5]
        expected_output = [1, 2, 6, 24, 120]
        self.assertEqual(calculate_factorials(input_list), expected_output)

    #  The function returns an empty list when given an empty list of integers.
    def test_empty_list_of_integers(self):
        input_list = []
        expected_output = []
        self.assertEqual(calculate_factorials(input_list), expected_output)

    #  The function correctly calculates factorials for negative integers and returns them as positive.
    def test_factorials_for_negative_integers(self):
        input_list = [-1, -2, -3, -4, -5]
        expected_output = [1, 2, 6, 24, 120]
        self.assertEqual(calculate_factorials(input_list), expected_output)

    #  The function raises a TypeError if given a non-list argument.
    def test_non_list_argument(self):
        input_list = "not a list"
        with self.assertRaises(TypeError):
            calculate_factorials(input_list)

    #  The function raises a TypeError if given a list containing non-integer elements.
    def test_non_integer_elements(self):
        input_list = [1, 2, "3", 4, 5]
        with self.assertRaises(TypeError):
            calculate_factorials(input_list)

    #  The function raises a ValueError if given a list containing negative integers and the 'ignore_negative' argument is not set to True.
    def test_negative_integers_without_ignore_negative(self):
        input_list = [1, -2, 3, -4, 5]
        with self.assertRaises(ValueError):
            calculate_factorials(input_list)
