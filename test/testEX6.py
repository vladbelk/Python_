
# Generated by CodiumAI

from homework.ex6_14_01 import calculate_sum_and_average

import unittest

class TestCalculateSumAndAverage(unittest.TestCase):

    #  The function returns the sum and average of a list of integers.
    def test_sum_and_average_of_list_of_integers(self):
        lst = [1, 2, 3, 4, 5]
        expected_sum = 15
        expected_avg = 3.0
        actual_sum, actual_avg = calculate_sum_and_average(lst)
        self.assertEqual(actual_sum, expected_sum)
        self.assertEqual(actual_avg, expected_avg)

    #  The function works correctly with a list of positive integers.
    def test_sum_and_average_of_list_of_positive_integers(self):
        lst = [10, 20, 30, 40, 50]
        expected_sum = 150
        expected_avg = 30.0
        actual_sum, actual_avg = calculate_sum_and_average(lst)
        self.assertEqual(actual_sum, expected_sum)
        self.assertEqual(actual_avg, expected_avg)

    #  The function works correctly with a list of negative integers.
    def test_sum_and_average_of_list_of_negative_integers(self):
        lst = [-10, -20, -30, -40, -50]
        expected_sum = -150
        expected_avg = -30.0
        actual_sum, actual_avg = calculate_sum_and_average(lst)
        self.assertEqual(actual_sum, expected_sum)
        self.assertEqual(actual_avg, expected_avg)

    #  The function returns an error message if the input is an empty list.
    def test_error_message_for_empty_list_input(self):
        lst = []
        with self.assertRaises(ZeroDivisionError):
            calculate_sum_and_average(lst)

    #  The function returns an error message if the input is not a list.
    def test_error_message_for_non_list_input(self):
        lst = "not a list"
        with self.assertRaises(TypeError):
            calculate_sum_and_average(lst)

    #  The function returns an error message if the input contains non-integer elements.
    def test_error_message_for_non_integer_elements_input(self):
        lst = [1, 2, "3", 4, 5]
        with self.assertRaises(ValueError):
            calculate_sum_and_average(lst)
