
# Generated by CodiumAI

from homework.ex5_14_01 import count_occurrences

import unittest

class TestCountOccurrences(unittest.TestCase):

    #  The function returns the correct count of occurrences of a given number in a list.
    def test_correct_count(self):
        lst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
        num = 1
        expected_count = 2
        self.assertEqual(count_occurrences(lst, num), expected_count)

    #  The function returns 0 if the given number is not in the list.
    def test_zero_count(self):
        lst = [1, 2, 3, 4, 5]
        num = 6
        expected_count = 0
        self.assertEqual(count_occurrences(lst, num), expected_count)

    #  The function works correctly with lists containing only one element.
    def test_single_element_list(self):
        lst = [1]
        num = 1
        expected_count = 1
        self.assertEqual(count_occurrences(lst, num), expected_count)

    #  The function works correctly with large lists.
    def test_large_list(self):
        lst = [1] * 1000000
        num = 1
        expected_count = 1000000
        self.assertEqual(count_occurrences(lst, num), expected_count)

    #  The function works correctly with negative numbers.
    def test_negative_numbers(self):
        lst = [-1, -2, -3, -4, -5, -1, -2, -3, -4, -5]
        num = -1
        expected_count = 2
        self.assertEqual(count_occurrences(lst, num), expected_count)

    #  The function works correctly with decimal numbers.
    def test_decimal_numbers(self):
        lst = [1.5, 2.5, 3.5, 4.5, 5.5, 1.5, 2.5, 3.5, 4.5, 5.5]
        num = 1.5
        expected_count = 2
        self.assertEqual(count_occurrences(lst, num), expected_count)
