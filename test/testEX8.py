# Generated by CodiumAI
from pip._internal.utils.misc import captured_output

from homework.ex8_14_01 import print_odd_numbers

import unittest


class TestPrintOddNumbers(unittest.TestCase):

    #  prints all odd numbers between start and end
    def test_print_odd_numbers_all_odd_numbers(self):
        start = 1
        end = 10
        expected_output = "1\n3\n5\n7\n9\n"

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)

    #  prints nothing if start and end are both even
    def test_print_odd_numbers_both_even(self):
        start = 2
        end = 4
        expected_output = ""

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)

    #  prints only start if it is odd and end is even
    def test_print_odd_numbers_start_odd_end_even(self):
        start = 3
        end = 6
        expected_output = "3\n"

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)

    #  prints nothing if start > end
    def test_print_odd_numbers_start_greater_than_end(self):
        start = 5
        end = 2
        expected_output = ""

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)

    #  prints only start if start and end are odd and start == end
    def test_print_odd_numbers_start_and_end_odd_same_value(self):
        start = 7
        end = 7
        expected_output = "7\n"

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)

    #  prints only start if start is odd and end is even and start + 1 == end
    def test_print_odd_numbers_start_odd_end_even_one_apart(self):
        start = 9
        end = 10
        expected_output = "9\n"

        with captured_output() as (out, err):
            print_odd_numbers(start, end)

        self.assertEqual(out.getvalue(), expected_output)
