
# Generated by CodiumAI

from homework.ex12_14_01 import is_prime

import unittest

class TestIsPrime(unittest.TestCase):

    #  Returns True for prime numbers
    def test_prime_numbers(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertTrue(is_prime(5))
        self.assertTrue(is_prime(7))
        self.assertTrue(is_prime(11))
        self.assertTrue(is_prime(13))
        self.assertTrue(is_prime(17))
        self.assertTrue(is_prime(19))
        self.assertTrue(is_prime(23))
        self.assertTrue(is_prime(29))
        self.assertTrue(is_prime(31))

    #  Returns False for non-prime numbers
    def test_non_prime_numbers(self):
        self.assertFalse(is_prime(4))
        self.assertFalse(is_prime(6))
        self.assertFalse(is_prime(8))
        self.assertFalse(is_prime(9))
        self.assertFalse(is_prime(10))
        self.assertFalse(is_prime(12))
        self.assertFalse(is_prime(14))
        self.assertFalse(is_prime(15))
        self.assertFalse(is_prime(16))
        self.assertFalse(is_prime(18))
        self.assertFalse(is_prime(20))

    #  Returns False for numbers less than 2
    def test_less_than_two(self):
        self.assertFalse(is_prime(0))
        self.assertFalse(is_prime(1))

    #  Returns False for number 0
    def test_zero(self):
        self.assertFalse(is_prime(0))

    #  Returns False for number 1
    def test_one(self):
        self.assertFalse(is_prime(1))

    #  Returns False for negative numbers
    def test_negative_numbers(self):
        self.assertFalse(is_prime(-2))
        self.assertFalse(is_prime(-3))
        self.assertFalse(is_prime(-5))
        self.assertFalse(is_prime(-7))
        self.assertFalse(is_prime(-11))
        self.assertFalse(is_prime(-13))
        self.assertFalse(is_prime(-17))
        self.assertFalse(is_prime(-19))
        self.assertFalse(is_prime(-23))
        self.assertFalse(is_prime(-29))
        self.assertFalse(is_prime(-31))
